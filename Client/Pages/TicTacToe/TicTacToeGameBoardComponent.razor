@if (Board != null)
{
    if (Board.Dimension % 2 == 1)
    {
        <div class="p-2">
            <table class="table m-0">
                @foreach (var board in Board.Boards)
                {
                    <tr>
                        <td><TicTacToeGameBoardComponent Board="board" Path="Path.Append(board.Position)" ClickCell="ClickCell" /></td>
                    </tr>

                }
            </table>
        </div>
    }
    else if (Board.Dimension >= 2)
    {
        
        <div class="board-container">
            <table class="table">
                @foreach (var board in Board.Boards)
                {
                    <tr>
                        @foreach (var subBoard in board.Boards)
                        {
                            <td><TicTacToeGameBoardComponent Board="subBoard" Path="Path.Append(board.Position).Append(subBoard.Position)" ClickCell="ClickCell" Display="Display"/></td>
                        }
                    </tr>
                }
            </table>
        </div>

    }
    else //0
    {
        <a class="@(Board.Cell != null ? "occupied-cell" : null) @(Highlighted() ? "highlighted" : null)" @onclick="async () => ClickCell(Path)">@Board.Cell</a>
    }
}

@code {
    [Parameter]
    public TicTacToeBoard Board { get; set; }
    [Parameter]
    public IEnumerable<int> Path { get; set; }
    [Parameter]
    public Action<IEnumerable<int>> ClickCell { get; set; }
    [Parameter]
    public TicTacToeDisplay Display { get; set; }
    private const int CellWidth = 30;
    private const int CellHeight = 30;
    private bool Highlighted()
    {
        if (Display != null && Display.HighlightedCellPath != null)
        {
            return Path.Zip(Display.HighlightedCellPath, (i, j) => i == j).All(i => i);
        }
        return false;
    }
}
