@page "/tictactoe/lobby/{LobbyCode}/{PlayerId}"
@implements IDisposable
@inject HttpClient Http
@inject NavigationManager navigation
@using System.Timers
@using Microsoft.AspNetCore.SignalR.Client


<div class="container">
    @if (ErrorMessage != null)
    {
        <div class="alert alert-error">
            @ErrorMessage
        </div>
    }
    <div class="row">
        <div class="col-lg-4">
            <div class="card shadow">
                <div class="card-header">
                    Tic-Tac-Toe Lobby
                </div>
                <div class="card-body">
                    <div>Code: @Status?.LobbyCode</div>
                    <div>Status: @Status?.Stage</div>
                    @if (Status != null)
                    {
                        var isReadonly = Status.HostPlayerId != PlayerId;
                        <h4>Game Settings</h4>
                        <div class="form-group">
                            <label class="control-label">Lobby Name</label>
                            @if(isReadonly)
                            {
                                <input class="form-control" @bind="@Status.Nickname" type="number" @onkeypress="SaveSettings" readonly/>
                            }
                            else
                            {
                                <input class="form-control" @bind="@Status.Nickname" type="number" @onkeypress="SaveSettings"/>
                            }
                        </div>
                        <div class="form-group">
                            <label class="control-label">Maximum Players</label>
                            @if(isReadonly)
                            {
                                <input class="form-control" @bind="@Status.MaximumPlayers" type="number" @onkeypress="SaveSettings" readonly/>
                            }
                            else
                            {
                                <input class="form-control" @bind="@Status.MaximumPlayers" type="number" @onkeypress="SaveSettings"/>
                            }
                        </div>
                        <h4>Game Configuration</h4>
                        <div class="form-group">
                            <label class="control-label">Dimensions</label>
                            @if(isReadonly)
                            {
                                <input class="form-control" @bind="@Status.Dimensions" type="number" @onkeypress="SaveSettings" readonly/>
                            }
                            else
                            {
                                <input class="form-control" @bind="@Status.Dimensions" type="number" @onkeypress="SaveSettings" />
                            }           
                        </div>
                        <div class="form-group">
                            <label class="control-label">Board Size</label>
                            @if(isReadonly)
                            {
                                <input class="form-control" @bind="@Status.BoardSize" type="number" @onkeypress="SaveSettings" readonly/>
                            }
                            else
                            {
                                <input class="form-control" @bind="@Status.BoardSize" type="number" @onkeypress="SaveSettings"/>
                            }
                        </div>
                        @if (Status.HostPlayerId == PlayerId)
                        {
                            <div class="form-group mt-2">
                                <a class="btn btn-success" @onclick="ClickStartGame">Start Game</a>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
        <div class="col-lg-8">
            <div class="card shadow">
                <div class="card-header">
                    Players
                </div>
                <div class="card-body">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>Id</th>
                                <th>Nickname</th>
                                <th>Type</th>
                                <th>Token</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (Status != null)
                            {
                                @foreach (var player in Status.Players.Where(i => i != null))
                                {
                                    <tr>
                                        <td>@player.PlayerId</td>
                                        <td>@player.Nickname</td>
                                        <td>@(player.Bot ? "Bot" : "Human")</td>
                                        <td>@player.Token</td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <div>Loading...</div>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string LobbyCode { get; set; }
    [Parameter]
    public string PlayerId { get; set; }
    public TicTacToeGameStatus Status { get; set; }
    public string ErrorMessage { get; set; }
    public char PlayerToken { get; set; }
    private const int TimerInterval = 1000;
    private HubConnection hubConnection;

    protected override async Task OnParametersSetAsync()
    {
        //Dispose any old instance that we may have had before
        Dispose();

        hubConnection = new HubConnectionBuilder()
            .WithUrl(navigation.ToAbsoluteUri($"/tictactoe/ws?LobbyCode={LobbyCode}"))
            .WithAutomaticReconnect()
            .Build();
        hubConnection.On<TicTacToeGameStatus>("SetStatus", SetStatus);
        hubConnection.On<TicTacToeGameStatus>("UpdatePlayers", HandleUpdatePlayers);
        hubConnection.On("GameStarting", () => navigation.NavigateTo($"tictactoe/{LobbyCode}/{PlayerId}"));
        hubConnection.On<TicTacToeGameStatus>("UpdateSettings", HandleUpdateSettings);
        hubConnection.On<string>("ErrorMessage", error => ErrorMessage = error);
        await hubConnection.StartAsync();

        await base.OnParametersSetAsync();
    }
    private async Task SetStatus(TicTacToeGameStatus status)
    {
        Status = status;
        StateHasChanged();
    }
    private async Task SaveSettings()
    {
        await hubConnection.SendAsync("SaveSettings", Status);
    }
    private async Task ClickStartGame()
    {
        await hubConnection.SendAsync("StartGame", Status);
    }
    public async void Dispose()
    {
        if(hubConnection != null)
            await hubConnection.DisposeAsync();
    }
    public void HandleUpdatePlayers(TicTacToeGameStatus updatedStatus)
    {
        Status.Players = updatedStatus.Players;
    }
    public void HandleUpdateSettings(TicTacToeGameStatus updatedStatus)
    {
        if (Status.HostPlayerId == PlayerId)
            return;
        Status.MaximumPlayers = updatedStatus.MaximumPlayers;
        Status.Nickname = updatedStatus.Nickname;
        Status.BoardSize = updatedStatus.BoardSize;
        Status.Dimensions = updatedStatus.Dimensions;
    }
}
