@page "/tictactoe/lobby/{LobbyCode}/{PlayerId}" 
@inject HttpClient Http 

<div>
    <h3>Lobby</h3>
</div>

<div>
    <h4>Code: @Status?.LobbyCode</h4>
</div>

<div class="row">
    <div class="col-lg-8">
        <div class="card shadow">
            <div class="card-header">
                Players
            </div>
            <div class="card-body">

            </div>
        </div>
    </div>
</div>
<div class="card-shadow">

</div>
<table>
    <thead>
        <tr>
            <th>Id</th>
            <th>Nickname</th>
        </tr>
    </thead>
    @if (Status != null)
    {
        @foreach (var player in Status.Players.Where(i => i != null))
        {
            <tr>
                <td>@player.Id</td>
                <td>@player.Nickname</td>
            </tr> 
        }
    }
    else
    {
        <div>Loading...</div>
    }
</table>

@code {
    [Parameter]
    public string LobbyCode { get; set; }
    [Parameter]
    public string PlayerId { get; set; }
    public Game Status { get; set; }
    public TicTacToeSettings Settings { get; set; }
    protected override async Task OnInitializedAsync()
    {
        /*
        var timer = new Timer(1000);
        timer.Elapsed += async (obj, e) => await Refresh();
        timer.Start();
        */
        await Refresh();

        await base.OnInitializedAsync();
    }
    private async Task Refresh()
    {
        try
        {
            var request = new LobbyStatusRequest()
            {
                LobbyCode = LobbyCode
            };
            var result = await Http.PostFromJsonAsync<LobbyStatusRequest, LobbyStatusResult<TicTacToeSettings>>("TicTacToe/LobbyStatus", request);
            Console.Write(result);
            Status = result?.Game;
            Settings = result?.Settings;
        }
        catch (Exception err)
        {
            Console.WriteLine("ERROR" + err.Message);
        }
    }
}
