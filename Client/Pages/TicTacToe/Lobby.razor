@page "/tictactoe/lobby/{LobbyCode}/{PlayerId}"
@inject HttpClient Http
@using System.Timers 

<div class="container">
    @if (Message != null){
        <div class="alert alert-@MessageType">
            @Message
        </div>
    }
    <div class="row">
        <div class="col-lg-4">
            <div class="card shadow">
                <div class="card-header">
                    Tic-Tac-Toe Lobby
                </div>
                <div class="card-body">
                    <div>Code: @Status?.LobbyCode</div>
                    @if (Status != null && Status?.HostPlayerId == PlayerId)
                    {
                        <h4>Game Settings</h4>
                        <div class="form-group">
                            <label class="control-label">Maximum Players</label>
                            <input class="form-control" @bind-value="@Status.MaximumPlayers" type="number" />
                        </div>
                        <h4>Game Configuration</h4>
                        <div class="form-group">
                            <label class="control-label">Dimensions</label>
                            <input class="form-control" @bind-value="@Status.Dimensions" type="number" />
                        </div>
                        <div class="form-group">
                            <label class="control-label">Board Size</label>
                            <input class="form-control" @bind-value="@Status.BoardSize" type="number" />
                        </div>
                        <div class="form-group mt-2">
                            <a class="btn btn-primary" @onclick="ClickSaveSettings">Save Settings</a>
                        </div>
                    }
                </div>
            </div>
        </div>
        <div class="col-lg-8">
            <div class="card shadow">
                <div class="card-header">
                    Players
                </div>
                <div class="card-body">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>Id</th>
                                <th>Nickname</th>
                                <th>Type</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (Status != null)
                            {
                                @foreach (var player in Status.Players.Where(i => i != null))
                                {
                                    <tr>
                                        <td>@player.PlayerId</td>
                                        <td>@player.Nickname</td>
                                        <td>@(player.Bot ? "Bot" : "Human")</td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <div>Loading...</div>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>
@if (Status?.HostPlayerId == PlayerId)
{
<div class="fixed-bottom float-right p-4">
    <a class="btn btn-success" @onclick="ClickStartGame">Start Game</a>
</div>
}

@code {
    [Parameter]
    public string LobbyCode { get; set; }
    [Parameter]
    public string PlayerId { get; set; }
    public TicTacToeGameStatus Status { get; set; }
    public string Message { get; set; }
    public string MessageType { get; set; }
    private const int TimerInterval = 1000;
    protected override async Task OnInitializedAsync()
    {
        await Refresh();
        var timer = new Timer(TimerInterval);
        timer.Elapsed += async (obj, e) => await Refresh();
        timer.Start();

        await base.OnInitializedAsync();
    }
    private async Task Refresh()
    {
        try
        {
            Status = await Http.PostFromJsonAsync<string, TicTacToeGameStatus>($"TicTacToe/GameStatus?LobbyCode={LobbyCode}", LobbyCode);
            StateHasChanged();
        }
        catch (Exception err)
        {
            Console.WriteLine("ERROR" + err.Message);
        }
    }
    private async Task ClickSaveSettings()
    {
        var result = await Http.PostFromJsonAsync<TicTacToeGameStatus, SaveSettingsResult>("TicTacToe/SaveSettings", Status);
        Message = result.Message;
        MessageType = result.Success ? "success" : "danger";
    }
    private async Task ClickStartGame()
    {

    }
}
