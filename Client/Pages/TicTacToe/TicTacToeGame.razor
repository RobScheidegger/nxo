@page "/tictactoe/{LobbyCode}/{PlayerId}"
@inject HttpClient Http
@using System.Timers;

<div class="container">
    <h3>Tic Tac Toe </h3>
    @if(GameState != null)
    {
        <h4>@GameState.CurrentPlayerName's Turn</h4>
    }
    <div class="row">
        <div class="col-lg-2">
            @Movetext
        </div>
        <div class="col-lg-8">
            <div class="board">
                @if (GameState != null)
                { 
                    <TicTacToeGameBoardComponent Board="@GameState.Board" Path="Enumerable.Empty<int>()" ClickCell="ClickCell"></TicTacToeGameBoardComponent>
                }
                else
                {
                    <div>Loading...</div>
                }
            </div>
        </div>
        <div class="col-lg-2">

        </div>
    </div>
</div>

@code {
    [Parameter]
    public string LobbyCode { get; set; }
    [Parameter]
    public string PlayerId { get; set; }
    public string Movetext { get; set; }

    public TicTacToeGameStatus GameState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        GameState = await Http.PostFromJsonAsync<string, TicTacToeGameStatus>($"TicTacToe/GetGameStatus?LobbyCode={LobbyCode}", LobbyCode);
        Console.Write(GameState);
        await base.OnInitializedAsync();
    }
    private async void ClickCell(IEnumerable<int> Path)
    {
        var move = new TicTacToeMove()
        {
            LobbyCode = LobbyCode,
            Path = Path,
            PlayerId = PlayerId
        };
        var moveResult = await Http.PostFromJsonAsync<TicTacToeMove, MoveResult>("TicTacToe/PerformMove", move);
        Movetext = $"{moveResult.Message}";
        StateHasChanged();
    }
}
