@page "/tictactoe/{LobbyCode}/{PlayerId}"
@inject HttpClient Http
@inject NavigationManager navigation 
@implements IDisposable
@using TicTacToe; 
@using Microsoft.AspNetCore.SignalR.Client
@using System.Threading;


<div id="game">
    <h3>Tic Tac Toe </h3>
    <div class="game-container">
        <div class="border" id="board">
            @if (GameState != null)
            { 
                <TicTacToeGameBoardComponent Board="@GameState.Board" Path="Enumerable.Empty<int>()" ClickCell="ClickCell" Display="Display"></TicTacToeGameBoardComponent>
            }
            else
            {
                <div>Loading...</div>
            }
        </div>

        <div id="infobox">
            <div class="border p-2">
                @if (GameState != null)
                {
                    <h4>@GameState.CurrentPlayerName's Turn</h4>
                }
                @if(!string.IsNullOrEmpty(ErrorText))
                {
                    <div class="alert alert-danger">
                        @ErrorText
                    </div>
                }
                @if (GameState != null && GameState.Completed)
                {
                    <h5>Winner: @(GameState.Winner?.Nickname??"Draw")</h5>
                }
                @if(GameState != null)
                {
                    <table class="table table-striped table-sm">
                        <thead>
                            <tr class="flextr">
                                <th>Move</th>
                                <th>Find</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach(var history in GameState.History)
                            {
                            <tr class="flextr">
                                <td>@history.PlayerName played at @string.Join(",", history.MovePath.Select(i => i + 1))</td>
                                <td>
                                    <a class="btn btn-primary btn-sm" @onclick="() => Highlight(history.MovePath)">
                                        Find
                                    </a>
                                </td>
                            </tr>
                            }
                        </tbody>
                    </table>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string LobbyCode { get; set; }
    [Parameter]
    public string PlayerId { get; set; }
    public string ErrorText { get; set; }
    private TicTacToeDisplay Display { get; set; }
    private const int TimerInterval = 1000;
    private Timer Timer { get; set; }
    public TicTacToeGameStatus GameState { get; set; }
    private HubConnection hubConnection;

    protected override async Task OnParametersSetAsync()
    {
        //Dispose any old instance that we may have had before
        Dispose();
        Display = new TicTacToeDisplay();

        hubConnection = new HubConnectionBuilder()
            .WithUrl(navigation.ToAbsoluteUri($"/tictactoe/ws?LobbyCode={LobbyCode}"))
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<TicTacToeGameStatus>("UpdateBoard", HandleNewGameState);
        await hubConnection.StartAsync();

        await base.OnParametersSetAsync();
    }
    public async void Dispose()
    {
        if (Timer != null)
        {
            Timer.Change(Timeout.Infinite, TimerInterval);
            Timer.Dispose();
        }
        GameState = null;
        if (hubConnection != null)
        {
            await hubConnection.StopAsync();
        }
    }

    private async void ClickCell(IEnumerable<int> Path)
    {
        var move = new TicTacToeMove()
        {
            LobbyCode = LobbyCode,
            Path = Path,
            PlayerId = PlayerId
        };
        await hubConnection.SendAsync("PerformMove", move);
    }
    public void HandleNewGameState(TicTacToeGameStatus newGameState)
    {
        if (newGameState.History.Count != GameState?.History.Count)
        {
            RegisterNewMove();
            Display.LastMove = newGameState.History.LastOrDefault()?.MovePath;
        }
        GameState = newGameState;
        StateHasChanged();
    }
    private void Highlight(IEnumerable<int> Path)
    {
        Display.HighlightedCellPath = Path;
        StateHasChanged();
    }
    private void RegisterNewMove()
    {
        ErrorText = null;
        StateHasChanged();
    }


}
