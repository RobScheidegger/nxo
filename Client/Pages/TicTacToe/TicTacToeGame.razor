@page "/tictactoe/{LobbyCode}/{PlayerId}"
@inject HttpClient Http
@using System.Timers;

<div id="game">
    <h3>Tic Tac Toe </h3>

    <div class="game-container">
        <div class="border" id="board">
            @if (GameState != null)
            { 
                <TicTacToeGameBoardComponent Board="@GameState.Board" Path="Enumerable.Empty<int>()" ClickCell="ClickCell"></TicTacToeGameBoardComponent>
            }
            else
            {
                <div>Loading...</div>
            }
        </div>

        <div id="infobox">
            <div class="border p-2">
                @if (GameState != null)
                {
                    <h4>@GameState.CurrentPlayerName's Turn</h4>
                }
                @if(!string.IsNullOrEmpty(ErrorText))
                {
                    <div class="alert alert-danger">
                        @ErrorText
                    </div>
                }
                @if (GameState != null && GameState.Completed)
                {
                    <h5>Winner: @GameState.Winner.Nickname</h5>
                }
                @if(GameState != null)
                {
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Player</th>
                                <th>Message</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach(var history in GameState.History)
                            {
                            <tr>
                                <td>@history.PlayerName</td>
                                <td>@history.Message</td>
                            </tr>
                            }
                        </tbody>
                    </table>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string LobbyCode { get; set; }
    [Parameter]
    public string PlayerId { get; set; }
    public string ErrorText { get; set; }
    private const int TimerInterval = 1000;

    public TicTacToeGameStatus GameState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Refresh();
        var timer = new Timer(TimerInterval);
        timer.Elapsed += async (obj, e) => await Refresh();
        timer.Start();

        await base.OnInitializedAsync();
    }
    private async void ClickCell(IEnumerable<int> Path)
    {
        var move = new TicTacToeMove()
        {
            LobbyCode = LobbyCode,
            Path = Path,
            PlayerId = PlayerId
        };
        var moveResult = await Http.PostFromJsonAsync<TicTacToeMove, MoveResult>("TicTacToe/PerformMove", move);
        if(!moveResult.Success)
        {
            ErrorText = moveResult.Message;
        }

        await Refresh();
    }
    private async Task Refresh()
    {
        try
        {
            GameState = await Http.PostFromJsonAsync<string, TicTacToeGameStatus>($"TicTacToe/GetGameStatus?LobbyCode={LobbyCode}", LobbyCode);
            StateHasChanged();
        }
        catch (Exception err)
        {
            Console.WriteLine("ERROR" + err.Message);
        }
    }
}
